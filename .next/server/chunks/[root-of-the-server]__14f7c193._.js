module.exports=[70406,(e,t,a)=>{t.exports=e.x("next/dist/compiled/@opentelemetry/api",()=>require("next/dist/compiled/@opentelemetry/api"))},46140,e=>e.a(async(t,a)=>{try{var r=e.i(30056),i=t([r]);[r]=i.then?(await i)():i;let{Pool:n}=r.default,o=new n({connectionString:process.env.DATABASE_URL,ssl:{require:!0,rejectUnauthorized:!1},idleTimeoutMillis:1e4,connectionTimeoutMillis:5e3});async function s(e,t){if("GET"===e.method)try{let e,{rows:a}=await (e=`SELECT id, service, district, description, budget, status, created_at
         FROM jobs
         ORDER BY created_at DESC`,o.query(e,void 0));return t.status(200).json(a)}catch(e){return console.error("[DB ERROR - GET]",e),t.status(500).json({message:"Failed to fetch jobs"})}if("POST"===e.method){let{service:a,district:r,description:i,budget:s}=e.body;if(!a||!r||!i||s<10)return t.status(400).json({message:"Missing or invalid fields"});try{let e,n,{rows:l}=await (e=`INSERT INTO jobs (service, district, description, budget, status, created_at)
         VALUES ($1, $2, $3, $4, 'open', NOW())
         RETURNING id`,n=[a,r,i,s],o.query(e,n)),d=l[0]?.id;return console.log(`[JOB-${d}] New ${a} job in ${r} â€“ $${s}`),t.status(201).json({message:"Job posted successfully",id:d})}catch(e){return console.error("[DB ERROR - POST]",e),t.status(500).json({message:"Database connection failed"})}}return t.status(405).json({message:"Method not allowed"})}e.s(["default",()=>s]),a()}catch(e){a(e)}},!1),83033,e=>e.a(async(t,a)=>{try{var r=e.i(26747),i=e.i(90406),s=e.i(44898),n=e.i(62950),o=e.i(46140),l=e.i(7031),d=e.i(81927),u=e.i(46432),c=t([o]);[o]=c.then?(await c)():c;let h=(0,n.hoist)(o,"default"),m=(0,n.hoist)(o,"config"),g=new s.PagesAPIRouteModule({definition:{kind:i.RouteKind.PAGES_API,page:"/api/jobs/index",pathname:"/api/jobs",bundlePath:"",filename:""},userland:o,distDir:".next",relativeProjectDir:""});async function p(e,t,a){g.isDev&&(0,u.addRequestMeta)(e,"devRequestTimingInternalsEnd",process.hrtime.bigint());let i="/api/jobs/index";i=i.replace(/\/index$/,"")||"/";let s=await g.prepare(e,t,{srcPage:i});if(!s){t.statusCode=400,t.end("Bad Request"),null==a.waitUntil||a.waitUntil.call(a,Promise.resolve());return}let{query:n,params:o,prerenderManifest:c,routerServerContext:p}=s;try{let a=e.method||"GET",r=(0,l.getTracer)(),s=r.getActiveScopeSpan(),u=g.instrumentationOnRequestError.bind(g),h=async s=>g.render(e,t,{query:{...n,...o},params:o,allowedRevalidateHeaderKeys:[],multiZoneDraftMode:!1,trustHostHeader:!1,previewProps:c.preview,propagateError:!1,dev:g.isDev,page:"/api/jobs/index",internalRevalidate:null==p?void 0:p.revalidate,onError:(...t)=>u(e,...t)}).finally(()=>{if(!s)return;s.setAttributes({"http.status_code":t.statusCode,"next.rsc":!1});let e=r.getRootSpanAttributes();if(!e)return;if(e.get("next.span_type")!==d.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${e.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let n=e.get("next.route");if(n){let e=`${a} ${n}`;s.setAttributes({"next.route":n,"http.route":n,"next.span_name":e}),s.updateName(e)}else s.updateName(`${a} ${i}`)});s?await h(s):await r.withPropagatedContext(e.headers,()=>r.trace(d.BaseServerSpan.handleRequest,{spanName:`${a} ${i}`,kind:l.SpanKind.SERVER,attributes:{"http.method":a,"http.target":e.url}},h))}catch(e){if(g.isDev)throw e;(0,r.sendError)(t,500,"Internal Server Error")}finally{null==a.waitUntil||a.waitUntil.call(a,Promise.resolve())}}e.s(["config",0,m,"default",0,h,"handler",()=>p]),a()}catch(e){a(e)}},!1)];

//# sourceMappingURL=%5Broot-of-the-server%5D__14f7c193._.js.map