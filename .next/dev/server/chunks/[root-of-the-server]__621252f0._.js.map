{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///D:/Khedme/Khedme-Web/pages/api/jobs/index.js"],"sourcesContent":["// pages/api/jobs/index.js\r\nimport pg from \"pg\";\r\nconst { Pool } = pg;\r\n\r\n// ✅ 1. Secure Supabase connection (works on Render, Vercel, or local)\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n  ssl: {\r\n    require: true,              // Force SSL\r\n    rejectUnauthorized: false,  // Ignore self-signed certs (Supabase safe)\r\n  },\r\n  idleTimeoutMillis: 10000,     // Prevent hanging connections\r\n  connectionTimeoutMillis: 5000 // Fail fast if DB unreachable\r\n});\r\n\r\n// ✅ 2. Query helper\r\nconst query = (text, params) => pool.query(text, params);\r\n\r\nexport default async function handler(req, res) {\r\n  // ✅ GET — fetch all jobs\r\n  if (req.method === \"GET\") {\r\n    try {\r\n      const { rows } = await query(\r\n        `SELECT id, service, district, description, budget, status, created_at\r\n         FROM jobs\r\n         ORDER BY created_at DESC`\r\n      );\r\n      return res.status(200).json(rows);\r\n    } catch (err) {\r\n      console.error(\"[DB ERROR - GET]\", err);\r\n      return res.status(500).json({ message: \"Failed to fetch jobs\" });\r\n    }\r\n  }\r\n\r\n  // ✅ POST — create new job\r\n  if (req.method === \"POST\") {\r\n    const { service, district, description, budget } = req.body;\r\n\r\n    // ✅ 3. Basic validation\r\n    if (!service || !district || !description || budget < 10) {\r\n      return res.status(400).json({ message: \"Missing or invalid fields\" });\r\n    }\r\n\r\n    try {\r\n      // ✅ 4. Insert job into DB\r\n      const { rows } = await query(\r\n        `INSERT INTO jobs (service, district, description, budget, status, created_at)\r\n         VALUES ($1, $2, $3, $4, 'open', NOW())\r\n         RETURNING id`,\r\n        [service, district, description, budget]\r\n      );\r\n\r\n      const jobId = rows[0]?.id;\r\n\r\n      // ✅ 5. Log success (mock provider notification)\r\n      console.log(`[JOB-${jobId}] New ${service} job in ${district} – $${budget}`);\r\n\r\n      // ✅ 6. Respond success\r\n      return res.status(201).json({ message: \"Job posted successfully\", id: jobId });\r\n    } catch (err) {\r\n      console.error(\"[DB ERROR - POST]\", err);\r\n      return res.status(500).json({ message: \"Database connection failed\" });\r\n    }\r\n  }\r\n\r\n  // ✅ 7. Handle invalid methods\r\n  return res.status(405).json({ message: \"Method not allowed\" });\r\n}\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AACA,MAAM,EAAE,IAAI,EAAE,GAAG,+GAAE;AAEnB,sEAAsE;AACtE,MAAM,OAAO,IAAI,KAAK;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,SAAS;QACT,oBAAoB;IACtB;IACA,mBAAmB;IACnB,yBAAyB,KAAK,8BAA8B;AAC9D;AAEA,oBAAoB;AACpB,MAAM,QAAQ,CAAC,MAAM,SAAW,KAAK,KAAK,CAAC,MAAM;AAElC,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,yBAAyB;IACzB,IAAI,IAAI,MAAM,KAAK,OAAO;QACxB,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MACrB,CAAC;;iCAEwB,CAAC;YAE5B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAC9B,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,oBAAoB;YAClC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAAuB;QAChE;IACF;IAEA,0BAA0B;IAC1B,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,IAAI,IAAI;QAE3D,wBAAwB;QACxB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,eAAe,SAAS,IAAI;YACxD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAA4B;QACrE;QAEA,IAAI;YACF,0BAA0B;YAC1B,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,MACrB,CAAC;;qBAEY,CAAC,EACd;gBAAC;gBAAS;gBAAU;gBAAa;aAAO;YAG1C,MAAM,QAAQ,IAAI,CAAC,EAAE,EAAE;YAEvB,gDAAgD;YAChD,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,MAAM,MAAM,EAAE,QAAQ,QAAQ,EAAE,SAAS,IAAI,EAAE,QAAQ;YAE3E,uBAAuB;YACvB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;gBAA2B,IAAI;YAAM;QAC9E,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;YAA6B;QACtE;IACF;IAEA,8BAA8B;IAC9B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,SAAS;IAAqB;AAC9D","debugId":null}}]
}